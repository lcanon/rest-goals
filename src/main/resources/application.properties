quarkus.http.port=8080
quarkus.http.cors=true
quarkus.log.console.enable=true
quarkus.log.console.level=INFO
%dev.quarkus.log.console.level=DEBUG
quarkus.log.console.color=true
quarkus.swagger-ui.always-include=true
quarkus.kubernetes-client.trust-certs=true
quarkus.kubernetes-client.namespace=${PROJECT_NAME:frontdev2ops}
quarkus.openshift.expose=true
### DATABASE on CLI deployment
quarkus.openshift.env.mapping.db-user.with-key=database-user
quarkus.openshift.env.mapping.db-user.from-secret=postgresql
quarkus.openshift.env.mapping.db-pass.with-key=database-password
quarkus.openshift.env.mapping.db-pass.from-secret=postgresql
quarkus.openshift.env.mapping.db-name.with-key=database-name
quarkus.openshift.env.mapping.db-name.from-secret=postgresql
### DATABASE
# The datasource URL
quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:postgresql}.${PROJECT_NAME:frontdev2ops}:${DB_PORT:5432}/${DB_NAME:postgresql}
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:test}
%test.quarkus.datasource.jdbc=false
# The kind of database we will connect to (e.g. h2, postgresql...).
quarkus.datasource.db-kind=postgresql
# The datasource username
quarkus.datasource.username=${DB_USER:user}
# The datasource password
quarkus.datasource.password=${DB_PASS:pass}
# Select whether the database schema is generated or not. drop-and-create is awesome in development mode. Accepted values: none, create, drop-and-create, drop, update.
quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.database.generation=drop-and-create
# Shows SQL generated
%dev.quarkus.hibernate-orm.log.sql=true

photo.api.key=${PHOTO_API_KEY:none}
